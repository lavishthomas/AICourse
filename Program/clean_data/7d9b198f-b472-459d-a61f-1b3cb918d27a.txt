“Software is eating hardware.”

That might sound counterintuitive given all the innovative hardware plays in the mix today — from Android Wear, SmartThings, Sproutling and Nest to the hotly anticipated iWatch. But Adam MacBeth, an advocate of the software-first approach, would argue that those products are only as compelling as the end-to-end experience that sets them alight.

“People think that they can build a game-changer with some really great industrial design and packaging, but that’s not the case anymore,” says MacBeth, whose work has helped shaped the iPod, Jawbone’s wristbands and FiftyThree’s Pencil. “Incredible industrial design is increasingly non-optional, what really matters is an equally beautiful software system that spans mobile, desktop, and more. It’s something that takes a lot of thought to get right.”

As technology accelerates, with companies like Dragon Innovation making manufacturing, supply chain and distribution cheaper and easier than ever before, tons of hardware startups are coming out of the woodwork. In this exclusive First Round Review interview, MacBeth offers tactics for how these companies can capture people’s imagination and create truly world-class products.

Build an Experience, Not Just a Product

There’s a reason FiftyThree’s Pencil is considered one of the most beautiful and revolutionary pieces of hardware in recent years. “The entire experience was crafted to naturally fit with how people work,” MacBeth says. “You’ll notice it doesn’t even have a power switch. It turns on and connects when you press the tip of the Pencil to the corner of your iPad. That’s all the result of clever software working across the device and the app. Small things like that take an average experience and make it magical.”

Your product has to be more than just one feature. “There are so many companies out there that get hung up on a piece of hardware that does just one thing. Kickstarter is full of single-fuction wearables (think pedometers and watches) that are at risk of being wiped out by bigger competitors who can move fast and build a comprehensive feature set," MacBeth says.

To succeed, hardware needs software that makes it sing.

“The most interesting devices I’ve seen take elements of the physical world and expose them to software,” he says. “It’s incredible what programming is able to make possible. If you buy a Tesla Model S today, the behavior of the car six months from now could be radically different because software can reshape the capability of the hardware continuously, exceeding the speed of customer demand.”

The best way to win in this environment is to create a software experience that connects multiple aspects of a user’s life. “This is the core of product differentiation,” he says. “Beautiful industrial design is just table stakes at this point. You need differentiated software combined with the right branding, the right look and feel, the right messaging. If you can deliver all of this, then I think you have the ingredients to be the next Apple or Tesla. For the first time ever, talented startups can outmatch the giants by leveraging software talent.”

But this is still no easy feat for multiple reasons:

You need to come up with a product that people actually need.

You need to build a multi-disciplinary team of experts that communicates seamlessly.

You have to work around dozens of limitations on technology, time, and money.

You need to figure out what to outsource without compromising quality.

You need to spend the time and the money on the hard, thoughtful engineering that humanizes your product and makes it practical.

Below, MacBeth shares best practices to break through each of these walls and develop not only interesting but marketable hardware experiences.

Find Real Problems to Solve

The best new ideas live at the boundary between the real world and software.

This is one reason that sensors have been getting so much attention. They allow us to collect data from the world around us and control it within software. Low-power radio technology has also created a new category: the internet of things, letting us communicate in new ways with the objects that fill our lives. Applications abound, from saving energy, to maximizing security, to increasing comfort for ourselves and loved ones.

“Your first step should always be to look at the new areas where data is being exposed. What kind of new opportunities will it enable?” MacBeth says. “Even when you start with this narrow focus, it seems like there are a million directions you can go. The key is to think about what people really need.”

Generally speaking, people need technology that will lower their costs, increase convenience, help them achieve better health, better careers, a better quality of life. These are immutable guiding principles that can take new fountains of data and give them purpose.

“A great example is the new technologies we’re seeing around bloodstream monitoring,” says MacBeth. One device, Cue, is capable of optimizing people’s health by taking blood and saliva samples (pictured below). “That’s an area where you can bring costs and anxieties down for people considerably. And since the sensors already exist, you don’t have to worry about developing them from scratch. You win by creating a great experience for users with software.”

Once you’ve honed in on a worthy problem, you need to think about the end-to-end experience of using hardware to solve that problem. “Identify the points that will potentially be the most challenging or difficult for users to figure out. Identify where you have the opportunity to add the most value for users along their journey. The integration between hardware and software needs to be the tightest at those points.”

Pencil’s ability to power up by simply touching the tip of the stylus to the screen saves the user an elaborate setup process. Also, the fact that a tablet can sense the difference between the Pencil and a user’s palm when they are drawing or writing presents tremendous value. In both cases, the close coupling of software and hardware allows users to work organically without guidance. The experience becomes as simple as pressing pencil to paper.

Have Software Lead Your Hardware Team

To create a memorable experience with a device, you need close collaboration among a cluster of disciplines: User experience, audio design, industrial design, manufacturing, engineering, marketing — the list goes on. Structure and clear communication are paramount. You can’t afford to focus your energy in the wrong places.

First, separate engineering and manufacturing functions. Yes, they need to work together to make sure that the designs engineering produces can in fact be made with the resources available. But otherwise, these two functions have very different skill sets and rhythms. “When manufacturing is ramping up on one product, engineering should already be moving on to the next,” MacBeth says. “Don’t have them working off of the same timeline.”

His second piece of advice might sound surprising. “Never let a hardware engineer lead the design of a hardware product,” he says. “The software team needs to take the lead in driving a product’s functional development. Software is the aspect most responsible for creating the behavior exposed to the user.” Once the desired experience is defined, the project lead should work with people from various disciplines to understand what’s possible, but at the end of the day, the software team is responsible for pulling it all together, and for making sure the product is kept fresh and up to date with firmware updates, new applications, and supporting web services, MacBeth says.

“I’ve seen startups put the manufacturing team in charge of engineering — including software and electrical engineering. This is a sure way to end up with a brittle, commodity product.”

Hardware is a multi-disciplinary challenge that requires multi-disciplinary talent.

The interest in both hardware, and software’s role in differentiating it, has given rise to a new technical skill set that MacBeth says is becoming one of the most powerful combinations in the industry: “It’s the systems-oriented software engineer who understands concepts like power management, radio signals, network communication for small devices.” The problem is, right now, this is a very difficult person to recruit.

“My advice for startup founders is that you need to hire generalists,” says MacBeth. “This applies equally to hardware startups. It’s easier for those people to have perspective on how entire systems work together. People who are generalists with deep computer science backgrounds can be placed on any kind of software problem.”

Everything is being leveled down to computer science challenges.

“You win if you’re able to build an experience where the user feels like something unexpected or miraculous is happening. If, for example, auddenly using the product is lighter-weight, or less complicated, or new things are possible, you delight customers. All of that has to do with how software is deployed.”

All that said, there are some things that software can’t accomplish when it comes to building a great hardware product. Physical technologies have limitations like battery life, form factor, and more. In order for software engineering to effectively run a team, there needs to be constant and close communication between them and the people who understand these limitations.

“The biggest challenge for hardware makers is communicating across disciplines. People tend to make a lot of assumptions that don’t pan out. The hardware engineering team might assume something about software response time. The software team might assume something about how the device will feel in someone’s hand,” says MacBeth. “I’ve seen it happen where hardware is created that physically can’t enable the software to work. All of this can be avoided if both sides communicate their assumptions about the desired end goal, and make sure everyone understands the terminology being used.”

Importantly, if 80% of your resources are invested in software development (typical for hardware startups) — leaving less for industrial and hardware design — you need to make sure those functions have a voice and seat at the table. They are the ones who can put a hard stop on ideas because of limits on energy, cost, size and materials. “Keeping everyone constantly connected through a system like Hipchat makes it easier for smaller functional areas to speak as loud as everyone else,” says MacBeth. “Regardless, you need to make sure they aren’t overwhelmed or drowned out.”

Push the Limits

Clear communication is especially critical when it comes to understanding the physical constraints that will shape your product.

“There are several types of limitations you’re certain to run up against: What the current technology can do, what you can afford, what your manufacturers can make possible, how much you can outsource, how much time you have to get to market, and much more,” says MacBeth. “Sometimes it will be something as detailed as a radio protocol that will only give your device so much range. First make a list of these constraints, and then ask yourself if they are real or surmountable.”

Sometimes, it’s possible to overcome what you thought were barriers with hacks or software solutions. In fact, that’s where some of the best, most forward-thinking innovation comes from.

You will hit hard edges. So will everyone else. If you can push past them, you're in the lead.

“This is why you want to push on constraints as far as they will possibly go,” says MacBeth. “Then, when you know you've hit a hard wall, you need to back away, and look for other areas where you can innovate.”

Building apps for other companies’ hardware comes with a laundry-list of limitations. Just think of all the guidelines and conventions Apple has established for people trying to get their products on the iPhone. When you build your own hardware, you have a chance to break down these walls, but you need to make sure you don’t sacrifice good taste.

“There’s a tremendous amount of blue sky in hardware development, and that’s a double-edged sword,” says MacBeth. “You can go really far afield and end up with something that no one will want to buy. You can also think creatively and build something truly amazing. The key is to have a design leader with great taste and great product sense.”

The best weapon for maintaining a handle on constraints: Making sure everyone is working off the same spec. It’s easy for rapid versioning to happen as teams sprint ahead individually. But you can’t let this happen. The product lead should control a single spec, constantly update it in a centralized location as it evolves, and make sure everyone understands the implications.

“This can mean working off of rough estimates, but you have to have them. Like is this thing going to have a month battery life or three days battery life? The exact number doesn’t matter in the beginning but the rough estimate will shape the product’s use cases. If a battery is only lasting three days, then it needs to be recharged easily. That might impact cost of batteries, and that affects the cost of the device, which could price you out of the market.”

Another area many teams don’t factor in is distribution and retail. You need to know what will happen if your product sits on a shelf for longer than anticipated. What will happen if the battery is removed? Or it gets wet? “The retail channel can be brutal for hardware startups,” MacBeth says. “If you don’t deliver something that works perfectly right out of the box, you probably won’t get another opportunity. So don’t just focus on product quality, think about the logistical issues too.”

All of these considerations need to be factored into the one spec that’s in front of everyone. And over time, this spec should get narrower and narrower as your constraints come into focus, and rough numbers become real numbers.

“This is why everyone needs to be looking at the same information, so they can run up against the same walls at the same time and understand each other,” MacBeth says. “When this happens, you get all of your domain experts weighing in at the same time to make sure you end up with the smartest, most elegant solution.”

Hardware is about balancing the idealism of vision with the reality of physicality.

“Your vision is going to push you to build something great,” he says. “The hard reality is going to push you to build something you can actually ship.”

Don’t “Outsource,” Choose a Partner

One of the most frequent questions MacBeth gets is how hardware startups should be thinking about outsourcing. Most of them don’t have the technical or manufacturing expertise to make the products themselves, especially at scale. And the cost of outsourcing these functions is lower than ever before.

He sees companies all the time that hit the same challenge: “We don’t know how to build this thing as a small startup. We need someone to help us think through the physical processes, who knows how to work through certifications and testing.”

You don't want to think about outsourcing like outsourcing. You want to be picking a partner.

“Early on, it really is a partnership. You’re choosing someone who is going to help you deliver this product. It’s a deal breaker if they aren’t going to hit deadlines or quality requirements.”

If you find a great partner who understands your product, your budget, and your delivery demands, you’re in good shape. In this case, it’s extremely beneficial to outsource early because you can watch your product take shape and make adjustments as you develop in-house.

Over time, as you grow and onboard more multi-disciplinary experts, you can take back more and more outsourced functionality. If possible, you want to bring important features back in-house as soon as possible so you have more control over them. You also want to dedicate one person or team to manage the relationship with your outsourcing partners. This is usually called a “new product introduction team” because they work closely with contract manufacturers to determine how to build your new device. This team is responsible for communicating what needs to get done to the partner, and communicating what the partner is able to do back to the broader company.

“Separate your deal-breakers (poor build quality, low yields) from your game-changers (innovative technology, great UX),” MacBeth says. “You need to work with your partner to avoid the deal-breakers, and never ever let your game-changers go out of house. If you don’t know where your product differentors lie, you will invest in the wrong places. And if your manufacturing partner says they can build them for you, know that your competition can do the same exact thing — so that’s clearly not a sustainable differentiation.”

This may sound intimidating, and it’s important to be thoughtful about what to share and what to keep proprietary, but MacBeth says hardware startups need to be realistic too. Even Apple works with contract manufacturers. “If you’re a startup leader ramping up operations, you can reasonably expect to never bring mechanical or industrial engineering in-house, and that’s okay. You just need to have the right partners.”

Think Like a Human

People think this should come naturally, but you’d be surprised how often it doesn’t, MacBeth says.

“The purpose of technology is to serve people and not the other way around. Good products are not built on check boxes or features. And this is especially important in hardware because we’re talking about things people interact with in a very physical way. Your product has to feel right against their skin or look natural in their home.”

Remember, objects tend to have sentimental value. “People buy devices and actually, truly love them. If you want to build something people will love, there’s no room for ugly. There’s no room for things that break. You have to be brutally honest about these things before your product is released. If it fails frequently for internal users at your company, it’s going to be far worse if you put it out there to the public. Users don’t temper their criticism, and many a company has been brought to its knees by customer complaints.”

Software has added a new dimension to consumers’ conception of quality. To build for humans is to build for all of their daily interactions — with their computers, with their phones, with their tablets, even, increasingly, with their cars. “When you’re developing the vision for your product, you have to think through your consumers’ lives, every day, every moment. What are they doing? What will they expect from your product at any given time?” MacBeth says.

The good news is that software can make it easier to build for humans. The more powerful the influence your software has over your hardware, the more you can mold your product to fit users’ needs. “Take Tesla,” he says. “It’s a huge piece of hardware with a lot of innovation, but the company can actually push a piece of firmware that can raise the cruise level of the car at highway speeds.”

The best products remove people's burdens. They say, 'Hey, let us carry that for you.'

“That’s the incredible thing about software — you can take more and more off of your user’s back and put it on yourself as an engineer or product developer,” says MacBeth. “That’s why I always ask questions like, ‘Why can’t we do this for the user? Why does the user have to take this step? Why can’t we just do this part for them? The more we can take care of for them, the better the experience will be, and the more the technology will fade into the background and become a natural part of their lives.”